#!/usr/bin/env node
const fs = require('fs');
const { execSync } = require('child_process');

console.log('üöÇ Iniciando build ULTRA otimizado para Railway...');
console.log('‚ö° Este build prioriza VELOCIDADE sobre otimiza√ß√£o');

try {
  // 1. Backup da configura√ß√£o original
  if (fs.existsSync('next.config.ts')) {
    console.log('üì¶ Fazendo backup da configura√ß√£o original...');
    fs.renameSync('next.config.ts', 'next.config.original.ts');
  }

  // 2. Usar configura√ß√£o ULTRA otimizada
  console.log('‚öôÔ∏è Aplicando configura√ß√£o ULTRA otimizada...');
  fs.renameSync('next.config.railway-ultra.ts', 'next.config.ts');

  // 3. Limpar completamente a pasta .next
  if (fs.existsSync('.next')) {
    console.log('üßπ Limpando build anterior completamente...');
    execSync('rm -rf .next', { stdio: 'inherit' });
  }

  // 4. Criar estrutura m√≠nima
  fs.mkdirSync('.next', { recursive: true });

  // 5. Configurar ambiente para build r√°pido
  const env = {
    ...process.env,
    // M√°xima mem√≥ria dispon√≠vel
    NODE_OPTIONS: '--max-old-space-size=8192 --max-semi-space-size=128',
    // Desabilitar TUDO que n√£o √© essencial
    NEXT_TELEMETRY_DISABLED: '1',
    ANALYZE: 'false',
    DISABLE_SENTRY: 'true',
    // For√ßar modo de produ√ß√£o
    NODE_ENV: 'production',
    // Configura√ß√µes para build r√°pido
    NEXT_PRIVATE_STANDALONE: 'true',
    NEXT_PRIVATE_MINIMAL_MODE: '1',
    // Desabilitar features
    NEXT_RUNTIME_SKIP_PREFETCH: '1',
    NEXT_DISABLE_MINIFICATION: '1',
    NEXT_DISABLE_COMPRESSION: '1',
  };

  // 6. Executar build com timeout estendido
  console.log('üî® Executando build ULTRA r√°pido...');
  console.log('‚è±Ô∏è Isso pode levar alguns minutos...');
  
  try {
    execSync('next build', { 
      stdio: 'inherit',
      env,
      // Timeout de 30 minutos
      timeout: 30 * 60 * 1000,
    });
  } catch (error) {
    console.error('‚ùå Build falhou, tentando sem p√°ginas est√°ticas...');
    
    // Criar um arquivo para for√ßar modo din√¢mico em TODAS as p√°ginas
    const forceConfig = `
// For√ßar TODAS as p√°ginas a serem din√¢micas
export const dynamic = 'force-dynamic';
export const dynamicParams = true;
export const revalidate = 0;
`;
    
    // Escrever em cada pasta principal
    const folders = [
      'src/app/[variants]',
      'src/app/[variants]/(main)',
      'src/app/[variants]/(auth)',
    ];
    
    folders.forEach(folder => {
      const configPath = `${folder}/force-dynamic.config.ts`;
      if (fs.existsSync(folder)) {
        fs.writeFileSync(configPath, forceConfig, 'utf8');
        console.log(`‚úçÔ∏è Criado ${configPath}`);
      }
    });
    
    // Tentar novamente
    execSync('next build', { 
      stdio: 'inherit',
      env,
      timeout: 30 * 60 * 1000,
    });
  }

  console.log('‚úÖ Build ULTRA conclu√≠do com sucesso!');

  // 7. Verificar se o build foi criado
  if (!fs.existsSync('.next/BUILD_ID')) {
    console.log('üìù Criando BUILD_ID manualmente...');
    fs.writeFileSync('.next/BUILD_ID', 'railway-ultra-' + Date.now(), 'utf8');
  }

} catch (error) {
  console.error('‚ùå Erro fatal no build:', error.message);
  process.exit(1);
} finally {
  // Restaurar configura√ß√£o original
  if (fs.existsSync('next.config.ts') && fs.existsSync('next.config.original.ts')) {
    console.log('üîÑ Restaurando configura√ß√£o original...');
    fs.unlinkSync('next.config.ts');
    fs.renameSync('next.config.original.ts', 'next.config.ts');
  }
}